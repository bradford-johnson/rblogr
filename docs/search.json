[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog was originally going to be a book titled “R Cookbook”. While working on this book it became clearer that a blog would be a more effective medium to continuously update and add content to indefinitely.\n\n\nProgramming joke on converting my previous R Cookbook project to this blog made with Quarto named rblogr\n\nThe tutorials and content may vary as they will mostly contain concepts and solutions that relate to what I am currently working on. If you have any content recommendations or feedback, please reach out and message me!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "SQL\n\n\n\n\n\n\n\n\n\n\n\nSep 17, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncleaning\n\n\nformattable\n\n\n\n\n\n\n\n\n\n\n\nSep 17, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncleaning\n\n\njanitor\n\n\n\n\n\n\n\n\n\n\n\nSep 16, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncleaning\n\n\noutliers\n\n\n\n\n\n\n\n\n\n\n\nSep 16, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ngithub\n\n\nprojects\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/pipes/index.html",
    "href": "posts/pipes/index.html",
    "title": "This is not a Pipe?",
    "section": "",
    "text": "Test post"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "I have been practicing with Quarto for a couple of weeks now, and have enjoyed it so much! Quarto has created many more opportunities for myself and the types of deliverable I can create. If you are using R or Python and have not gotten to use Quarto yet, then this is your sign to look into how awesome it is!\nClick the image below to go to Quarto’s Website"
  },
  {
    "objectID": "posts/github/index.html",
    "href": "posts/github/index.html",
    "title": "Why use GitHub with RStudio?",
    "section": "",
    "text": "Organizing projects in RStudio using GitHub is one thing I wish I had known about much sooner…\n\nAt first when I was learning R, I would only create R Script files and then save each plot as a .png. As time went on I discovered R Notebooks and R Markdown, these where perfect for practicing my R and having a single file with multiple different R Chunks that I could set up for each analysis stage. It was perfect because the file when saved would save a .html version, so it was a great way to work on and share projects.\nMore recently my projects became bigger and so did the files, but my local folder on my desktop named “Data Science” became more filled. At the same time I was creating my first GitHub account so I uploaded some of these R projects into repositories. Once I would make changes locally I would then replace the respective file on GitHub. This is the extent I used GitHub to, as a “Google Drive” in a way.\nHowever I was looking through RStudio’s settings and noticed the Git/SVN option: \nAfter clicking the RStudio link I quickly learned you can connect RStudio to GitHub. I watched a few videos and I was able to connect the two together. I did find that having the desktop GitHub app helped with the initial set up and cloning your repositories.\nNow when making a project in R, I create a repository with it and can push / pull project changes live. I ended up creating a new GitHub account and starting fresh with this new organization. This is how I currently organize my GitHub:\n\n\nProjects get their own repositories.\n\nEach one gets their own ReadMe files that describes the project.\n\nSmaller files like individual R Scripts or R Notebooks go into my R repository, .SQL files go into the SQL repository and so on.\n\nEach main repository like R or SQL gets a ReadMe for describing my work in general and other details.\n\n\n\nIn addition to this, I keep a clone of each repository on my local machine as a backup, and as a way to edit and push/pull updates from GitHub.\nHaving a repository for each project is great as you can also have a GitHub Pages site for each of them to share your code, or even a deliverable. Using Quarto and GitHub Pages is such a smooth process to rapidly deploy reproducible deliverables for stakeholders. When setting up the Pages with GitHub it will automatically update the website with a push to the main branch, meaning I can update my website from RStudio."
  },
  {
    "objectID": "posts/outliers/index.html",
    "href": "posts/outliers/index.html",
    "title": "Identifying and Removing Outliers",
    "section": "",
    "text": "Outliers can distort a dataset, but how do you find and remove them?"
  },
  {
    "objectID": "posts/clean_names/index.html",
    "href": "posts/clean_names/index.html",
    "title": "Cleaning up Column Names with Janitor",
    "section": "",
    "text": "Are they called column headers or column names? Perhaps it depends, but working with dirty ones can be avoided…\n\nWorking with dirty data is part of being a data analyst, and the janitor package is great because it can help clean up the column names so they are easier to work with. I will load in the readr package to import a hand crafted .csv that I made as an example. I will also load in the dplyr package so I can pipe the data into functions.\n\nClick on the hex Janitor logo to see the documentation"
  },
  {
    "objectID": "posts/clean_names/index.html#the-packages",
    "href": "posts/clean_names/index.html#the-packages",
    "title": "Cleaning up Column Names with Janitor",
    "section": "The Packages",
    "text": "The Packages\nHere is how you install and load the packages.\n\nInstall:\n\ninstall.packages(\"janitor\")\ninstall.packages(\"readr\")\ninstall.packages(\"dplyr\")\n\nLoad:\n\nlibrary(janitor)\nlibrary(readr)\nlibrary(dplyr)"
  },
  {
    "objectID": "posts/clean_names/index.html#importing-a-.csv-file",
    "href": "posts/clean_names/index.html#importing-a-.csv-file",
    "title": "Cleaning up Column Names with Janitor",
    "section": "Importing a .csv File",
    "text": "Importing a .csv File\nImporting a .csv file is quite simple and using the readr package, the read_csv(\" \") function will let you import a .csv as a data frame and you can use <- or = to assign the data frame a name.\n\n# read in .csv\ndirty_df <- read_csv('janitor-example.csv')\n\n\nDirty Column Names\nHere is what the dirty column names on this data frame look like. The capitalization is all wild, there are spaces between characters, some of the names are not concise…\n\ndirty_df %>% \n  head()\n\n# A tibble: 6 x 3\n  `DAY OF THE WEEK` `TEMP F` `WEaThEr CONDITIONS`\n  <chr>                <dbl> <chr>               \n1 Monday                  98 sunny               \n2 Tuesday                 95 sunny               \n3 Wednesday               70 cloudy              \n4 Thursday                85 sunny               \n5 Friday                  83 sunny               \n6 Saturday                85 sunny"
  },
  {
    "objectID": "posts/clean_names/index.html#cleaning-column-names",
    "href": "posts/clean_names/index.html#cleaning-column-names",
    "title": "Cleaning up Column Names with Janitor",
    "section": "Cleaning Column Names",
    "text": "Cleaning Column Names\nNow using the clean_names() function from the janitor package along with some mutate() functions I will load in the same data frame.\n\n# read in csv but with janitor and dplyr functions\nclean_df <- read_csv('janitor-example.csv') %>%\n  clean_names() %>%\n  mutate(weather_condition = w_ea_th_er_conditions) %>%\n  mutate(avg_temp_f = temp_f) %>%\n  mutate(weekday = day_of_the_week) %>%\n  select(weekday, avg_temp_f, weather_condition)\n\n\nCleaned Column Names\nHere is how the cleaned data frame looks. The column names are now easier to work with, and much better understood.\n\nclean_df %>%\n  head()\n\n# A tibble: 6 x 3\n  weekday   avg_temp_f weather_condition\n  <chr>          <dbl> <chr>            \n1 Monday            98 sunny            \n2 Tuesday           95 sunny            \n3 Wednesday         70 cloudy           \n4 Thursday          85 sunny            \n5 Friday            83 sunny            \n6 Saturday          85 sunny"
  },
  {
    "objectID": "posts/connect_database/index.html",
    "href": "posts/connect_database/index.html",
    "title": "Connect to a postgreSQL Database",
    "section": "",
    "text": "Connecting to a database can be an effective way to import data into R for analysis. In this post I will be showing how to connect to a postgreSQL database in RStudio."
  },
  {
    "objectID": "posts/connect_database/index.html#packages",
    "href": "posts/connect_database/index.html#packages",
    "title": "Connect to a postgreSQL Database",
    "section": "Packages",
    "text": "Packages\nYou will need the DBI, RPostgres, and dplyr packages.\ninstall.packages(\"DBI\")\ninstall.packages(\"RPostgres\")\ninstall.packages(\"dplyr\")\nOnce you install the packages you will need to load them.\nlibrary(DBI)\nlibrary(RPostgres)\nlibrary(dplyr)"
  },
  {
    "objectID": "posts/connect_database/index.html#connecting-to-the-database",
    "href": "posts/connect_database/index.html#connecting-to-the-database",
    "title": "Connect to a postgreSQL Database",
    "section": "Connecting to the Database",
    "text": "Connecting to the Database\nAfter loading the packages you can then connect to your database with this code and your database’s credentials. These credentials will be saved as con.\n# establish connection with postgres data base\ncon <- dbConnect(RPostgres::Postgres(),dbname = 'name',  \n      # enter name of database in the single quotes\n                 \n      host = 'address', \n# replace 'address' and enter the address of the database inside the single quotes\n                \n      port = 5432, \n# enter the port for the database \n      user = 'username', \n# replace 'username' with your username inside single quotes\n                 \n      password = 'password') \n# replace 'password' with your password inside single quotes"
  },
  {
    "objectID": "posts/connect_database/index.html#writing-a-sql-query-in-r",
    "href": "posts/connect_database/index.html#writing-a-sql-query-in-r",
    "title": "Connect to a postgreSQL Database",
    "section": "Writing a SQL Query in R",
    "text": "Writing a SQL Query in R\nAfter establishing your connection, you can then create your SQL query. It will be saved as res.\n# code to make sql query --inside of the double quotes you can create your query\nres <- dbSendQuery(con, \"\n                   SELECT COUNT(*)\n                   FROM ;\n                   \")\nTo execute your query you will then want to write and run this code, using dbFetch() with the name of your query object being the argument, in this case it is res. The results from this query will be saved as the name you assign it, for this code it is called df.\n# execute query\ndf <- dbFetch(res) \n# this will save the results of the query as an R data frame called 'DF'"
  },
  {
    "objectID": "posts/connect_database/index.html#disconnect-from-database",
    "href": "posts/connect_database/index.html#disconnect-from-database",
    "title": "Connect to a postgreSQL Database",
    "section": "Disconnect from Database",
    "text": "Disconnect from Database\nOnce you have run the query you can then clean the query and disconnect from the database using these functions and arguments respectively.\n# clear query\ndbClearResult(res)\n# disconnect from database\ndbDisconnect(con)"
  },
  {
    "objectID": "posts/outliers/index.html#what-are-outliers",
    "href": "posts/outliers/index.html#what-are-outliers",
    "title": "Identifying and Removing Outliers",
    "section": "What are outliers?",
    "text": "What are outliers?\nThis image is from DataCamp’s learning platform, and it shows a visual of a boxplot, and the outliers on either side of the distribution. To find the outliers on the lower range you do the following equation Q1 - 1.5 x IQR. To find outliers on the upper range you use this equation Q3 + 1.5 * IQR.\n\nYou can use those equations to then filter out the outliers and then continue with your analysis. I have created some data with outliers to show how you would do this in R."
  },
  {
    "objectID": "posts/outliers/index.html#steps-to-identify-outliers",
    "href": "posts/outliers/index.html#steps-to-identify-outliers",
    "title": "Identifying and Removing Outliers",
    "section": "Steps to identify outliers:",
    "text": "Steps to identify outliers:\n\nGet the 25th and 75th percentile of a dataset\n\n    Q = quantile(DATAFRAME$columnName, probs = c(.25,.75), na.rm = FALSE)\n\nFind the Interquartile Range (IQR)\n\n    iqr = IQR(DATAFRAMEf$columnName)\n\nFind upper and lower cut off ranges\n\n    up <-  Q[2]+1.5*iqr # Upper Range\n    low <- Q[1]-1.5*iqr # Lower Range"
  },
  {
    "objectID": "posts/outliers/index.html#steps-to-remove-outliers",
    "href": "posts/outliers/index.html#steps-to-remove-outliers",
    "title": "Identifying and Removing Outliers",
    "section": "Steps to remove outliers:",
    "text": "Steps to remove outliers:\n\nIdentify outliers\n\nAs shown above\n\nUse dplyr to filter\ninstall.packages(\"dplyr\") \nlibrary(dplyr)\nFilter\nclean_dataframe <- DATAFRAME %>%\n  filter(columnName > low & columnName < up)"
  },
  {
    "objectID": "posts/outliers/index.html#here-is-an-example-of-the-full-code-working-with-a-data-frame",
    "href": "posts/outliers/index.html#here-is-an-example-of-the-full-code-working-with-a-data-frame",
    "title": "Identifying and Removing Outliers",
    "section": "Here is an example of the full code working with a data frame",
    "text": "Here is an example of the full code working with a data frame\n\n# remove outliers steps\n# 1. get Q1 and Q3 \nQ = quantile(outlier_df$var1.1, probs = c(.25,.75), na.rm = FALSE)\n# 2. get IQR\niqr = IQR(outlier_df$var1.1)\n# 3. get upper and lower ranges\nup <-  Q[2]+1.5*iqr # Upper Range  \nlow <- Q[1]-1.5*iqr # Lower Range\n# 4. remove outliers (outlier_df is the name of my data frame, var1.1 is the name of the column that I am removing outliers from)\nno_outliers_p <- outlier_df %>%\n  filter(var1.1 > low & var1.1 < up) %>%\n  ggplot(aes(x = var1.1)) +\n  geom_boxplot() + \n  theme_classic() +\n  labs(title = \"Without Outliers\") +\n  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())"
  },
  {
    "objectID": "posts/outliers/index.html#with-outliers-vs-without-outliers",
    "href": "posts/outliers/index.html#with-outliers-vs-without-outliers",
    "title": "Identifying and Removing Outliers",
    "section": "With Outliers vs Without Outliers",
    "text": "With Outliers vs Without Outliers\n\n# patchwork to show plots\noutlier_p / no_outliers_p"
  },
  {
    "objectID": "posts/github/index.html#using-git-in-rstudio",
    "href": "posts/github/index.html#using-git-in-rstudio",
    "title": "Why use GitHub with RStudio?",
    "section": "Using Git in RStudio",
    "text": "Using Git in RStudio\nIn RStudio you can access the Git tab once you are connected, and page will add records as your make changes to the files. You can check them off and click the green arrow to push the changes to GitHub.\n\nYou can also hit the Commit button to then see the below example:\n\n\nSteps to a Push\n\n\nCheck off all the changes on the left side.\nEnter a commit message.\nPress the commit button on the bottom right, a window like this should then pop up. \nClose out of the pop up window, then hit the green up arrow labeled “Push” and you have done a push.\n\nDone\n\n\n\n\nSteps to a Pull\n\n\nHit the blue down arrow labeled “Pull”\n\nDone"
  },
  {
    "objectID": "posts/github/index.html#conclusion",
    "href": "posts/github/index.html#conclusion",
    "title": "Why use GitHub with RStudio?",
    "section": "Conclusion",
    "text": "Conclusion\nTo some this may seem like more to set up, and sure it may be a little more than just hitting save. The most important takeaway is that some type of file organization method needs to be implemented and sooner rather than later.\n\nThe benefits of using GitHub:\n\n\nHaving that central cloud based storage of files and projects.\nCollaborating with others can be easier with this method as everyone would need to have an account and be authorized to contribute to the repository, opposed to emailing or sending files back and forth.\nBranches for not losing your main files when making edits.\nAccess to GitHub Pages for projects (like this blog).\nBuild a portfolio.\nLearn how Git and GitHub works!"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Projects",
    "section": "",
    "text": "text\n\n\nsentiment\n\n\nSQL\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nSep 16, 2022\n\n\nBradford Johnson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/test/index.html",
    "href": "projects/test/index.html",
    "title": "rblogr",
    "section": "",
    "text": "test"
  },
  {
    "objectID": "projects/twitter/index.html",
    "href": "projects/twitter/index.html",
    "title": "Twitter Project",
    "section": "",
    "text": "Project using R and postgreSQL to conduct an analysis on Tweets extracted with R via the Twitter API."
  },
  {
    "objectID": "posts/percents/index.html",
    "href": "posts/percents/index.html",
    "title": "Adding Percent Signs with Formattable",
    "section": "",
    "text": "Have you wanted to create a visual or table, and struggled to figure out how to change decimals to percents in R?\n\n\n\nHere is how you install and load the package, and you can click here to see the documentation.\ninstall.packages(\"formattable\")\nlibrary(formattable)\nI will also be loading the tidyverse and janitor packages in the background.\n\n\n\nHere is how you would break down the iris dataset by species, using the formattable package to get percents of each species.\n\niris_df %>%\n  group_by(species) %>%\n  summarise(cnt = n()) %>%\n  mutate(freq = formattable::percent(cnt / sum(cnt)))\n\n# A tibble: 3 x 3\n  species      cnt freq      \n  <fct>      <int> <formttbl>\n1 setosa        50 33.33%    \n2 versicolor    50 33.33%    \n3 virginica     50 33.33%"
  }
]