---
title: "Cleaning up Column Names with Janitor"
author: "Bradford Johnson"
date: "2022-09-16"
categories: [cleaning, janitor]
---

## **Dealing with Dirty Column Headers**

Are they called column headers or column names? Perhaps it depends, but working with dirty ones can be avoided...

![](pan-xiaozhen-pj-BrFZ9eAA-unsplash.jpg)

Working with dirty data is part of being a data analyst, and the `janitor` package is great because it can help clean up the column names so they are easier to work with. I will load in the `readr` package to import a hand crafted `.csv` that I made as an example. I will also load in the `dplyr` package so I can pipe the data into functions.

> `Click on the hex Janitor logo to see the documentation`
>
> [![](janitor_logo.png)](https://sfirke.github.io/janitor/)

## The Packages

Here is how you install and load the packages.

> **Install:**

``` r
install.packages("janitor")
install.packages("readr")
install.packages("dplyr")
```

> **Load:**

``` r
library(janitor)
library(readr)
library(dplyr)
```

```{r include=FALSE}
library(janitor)
library(readr)
library(dplyr)
```

## Importing a .csv File

Importing a `.csv` file is quite simple and using the `readr` package, the `read_csv(" ")` function will let you import a .csv as a data frame and you can use `<-` or `=` to assign the data frame a name.

```{r warning=FALSE,message=FALSE}
# read in .csv
dirty_df <- read_csv('janitor-example.csv')
```

### Dirty Column Names

Here is what the dirty column names on this data frame look like. The capitalization is all wild, there are spaces between characters, some of the names are not concise...

```{r}
dirty_df %>% 
  head()
```

## Cleaning Column Names

Now using the `clean_names()` function from the `janitor` package along with some `mutate()` functions I will load in the same data frame.

```{r warning=FALSE,message=FALSE}
# read in csv but with janitor and dplyr functions
clean_df <- read_csv('janitor-example.csv') %>%
  clean_names() %>%
  mutate(weather_condition = w_ea_th_er_conditions) %>%
  mutate(avg_temp_f = temp_f) %>%
  mutate(weekday = day_of_the_week) %>%
  select(weekday, avg_temp_f, weather_condition)
```

### Cleaned Column Names

Here is how the cleaned data frame looks. The column names are now easier to work with, and much better understood.

```{r}
clean_df %>%
  head()
```
