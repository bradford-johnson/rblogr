{
  "hash": "f6e71de2af5ccdc9fc4d1c5812bbf9ea",
  "result": {
    "markdown": "---\ntitle: \"Cleaning up Column Names with `janitor`\"\nauthor: \"Bradford Johnson\"\ndate: \"2022-09-16\"\nimage: \"pan-xiaozhen-pj-BrFZ9eAA-unsplash.jpg\"\ncategories: [cleaning, janitor]\n---\n\n\n## **Dealing with Dirty Column Headers**\n\nAre they called column headers or column names? Perhaps it depends, but working with dirty ones can be avoided...\n\nWorking with dirty data is part of being a data analyst, and the `janitor` package is great because it can help clean up the column names so they are easier to work with. I will load in the `readr` package to import a hand crafted `.csv` that I made as an example. I will also load in the `dplyr` package so I can pipe the data into functions.\n\n> `Click on the hex janitor logo to see the documentation`\n>\n> [![](janitor_logo.png)](https://sfirke.github.io/janitor/)\n\n## The Packages\n\nHere is how you install and load the packages.\n\n> **Install:**\n\n``` r\ninstall.packages(\"janitor\")\ninstall.packages(\"readr\")\ninstall.packages(\"dplyr\")\n```\n\n> **Load:**\n\n``` r\nlibrary(janitor)\nlibrary(readr)\nlibrary(dplyr)\n```\n\n\n\n\n\n## Importing a .csv File\n\nImporting a `.csv` file is quite simple and using the `readr` package, the `read_csv(\" \")` function will let you import a .csv as a data frame and you can use `<-` or `=` to assign the data frame a name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in .csv\ndirty_df <- read_csv('janitor-example.csv')\n```\n:::\n\n\n### Dirty Column Names\n\nHere is what the dirty column names on this data frame look like. The capitalization is all wild, there are spaces between characters, some of the names are not concise...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndirty_df %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  `DAY OF THE WEEK` `TEMP F` `WEaThEr CONDITIONS`\n  <chr>                <dbl> <chr>               \n1 Monday                  98 sunny               \n2 Tuesday                 95 sunny               \n3 Wednesday               70 cloudy              \n4 Thursday                85 sunny               \n5 Friday                  83 sunny               \n6 Saturday                85 sunny               \n```\n:::\n:::\n\n\n## Cleaning Column Names\n\nNow using the `clean_names()` function from the `janitor` package along with some `mutate()` functions I will load in the same data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in csv but with janitor and dplyr functions\nclean_df <- read_csv('janitor-example.csv') %>%\n  clean_names() %>%\n  mutate(weather_condition = w_ea_th_er_conditions) %>%\n  mutate(avg_temp_f = temp_f) %>%\n  mutate(weekday = day_of_the_week) %>%\n  select(weekday, avg_temp_f, weather_condition)\n```\n:::\n\n\n### Cleaned Column Names\n\nHere is how the cleaned data frame looks. The column names are now easier to work with, and much better understood.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_df %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  weekday   avg_temp_f weather_condition\n  <chr>          <dbl> <chr>            \n1 Monday            98 sunny            \n2 Tuesday           95 sunny            \n3 Wednesday         70 cloudy           \n4 Thursday          85 sunny            \n5 Friday            83 sunny            \n6 Saturday          85 sunny            \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}